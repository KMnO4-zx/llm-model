{
  "add_bos_token": false,
  "add_eos_token": true,
  "add_prefix_space": false,
  "bos_token": {
    "__type": "AddedToken",
    "content": "<longcat_s>",
    "lstrip": false,
    "normalized": true,
    "rstrip": false,
    "single_word": false
  },
  "clean_up_tokenization_spaces": false,
  "eos_token": {
    "__type": "AddedToken",
    "content": "</longcat_s>",
    "lstrip": false,
    "normalized": true,
    "rstrip": false,
    "single_word": false
  },
  "model_max_length": 131072,
  "pad_token": {
    "__type": "AddedToken",
    "content": "<longcat_pad>",
    "lstrip": false,
    "normalized": true,
    "rstrip": false,
    "single_word": false
  },
  "sp_model_kwargs": {},
  "tokenizer_class": "BloomTokenizer",
  "unk_token": {
    "__type": "AddedToken",
    "content": "<longcat_unk>",
    "lstrip": false,
    "normalized": true,
    "rstrip": false,
    "single_word": false
  },
  "chat_template": "{%- set tool_choice = tool_choice | default('auto') %}\n{%- set ns = namespace(rounds = 0, tool_types = [], last_query_index = -1) %}\n\n{%- if tools and tool_choice != 'none' %}\n    {{- \"# Tools\n\" }}\n    {{- \"You have access to the following tools: \n\n\" }}\n    {%- for tool in tools %}\n        {%- if tool.type in ['code_interpreter', 'function'] %}\n            {%- if tool.type not in ns.tool_types %}\n                {%- set ns.tool_types = ns.tool_types + [tool.type] %}\n                {{- \"## Tool namespace: \" ~ tool.type ~ \"\n\n\" }}\n            {%- endif %}\n            {%- if tool.type == 'code_interpreter' %}\n                {%- set tool = {\"type\":\"code_interpreter\",\"function\":{\"name\":\"code_interpreter_preview\",\"description\":\"The code will be executed in a stateful Jupyter notebook sandbox environment, only supports local computation, data processing, and file operations. \nCode sandbox environment (network isolated) Any external network requests or online API calls are prohibited. \nIf online functionality is needed, please use other permitted tools. \nCode will respond with the output of the execution or time out after 60.0 seconds. \",\"parameters\":{\"type\":\"object\",\"properties\":{\"language\":{\"type\":\"string\",\"description\":\"The programming language of the code to be executed. Available values: python (Default), java, go, js, ts, c, c++.\"},\"code\":{\"type\":\"string\",\"description\":\"Python code to be executed must not include the following:\n- Importing network libraries such as requests, httplib, etc.\n- Any form of HTTP requests.\n- External API calls.\n- Network port operations. Example: ```python\nimport pandas as pd\npd.DataFrame({'A':[1,2]})\n```\"},\"timeout\":{\"type\":\"number\",\"description\":\"The maximum execution time of the code, in seconds. Default is 60.0.\"}}},\"required\":[\"code\"]}} %}\n            {%- endif %}\n            {{- \"### Tool name: \" + tool.function.name + \"\n\n\" }}\n            {{- \"Description: \" + tool.function.description + \"\n\n\" }}\n            {{- \"InputSchema: \n\" + tool.function.parameters | tojson(indent=2) + \"\n\n\" }}\n        {%- endif %}\n    {%- endfor %}\n    {{- '**Note**: For each function call, return a json object with function name and arguments within <longcat_tool_call></longcat_tool_call> XML tags as follows:\n<longcat_tool_call>\n{\"name\": <function-name>, \"arguments\": <args-dict>}\n</longcat_tool_call>\n' }}\n    {{- 'When multiple functions need to be called simultaneously, each function call should be wrapped in its own <longcat_tool_call> tag and placed consecutively. For example:\n<longcat_tool_call>\n{\"name\": <function-name>, \"arguments\": <args-dict>}\n</longcat_tool_call><longcat_tool_call>\n{\"name\": <function-name>, \"arguments\": <args-dict>}\n</longcat_tool_call>\n\n' }}\n    {{- \"# Messages\n\" }}\n\n    {%- for idx in range(messages|length - 1) %}\n        {%- set msg = messages[idx] %}\n        {%- if msg.role == 'assistant' and not msg.tool_calls %}\n            {%- set ns.last_query_index = idx %}\n        {%- endif %}\n    {%- endfor%}\n{%- endif %}\n\n{%- for msg in messages %}\n    {%- if msg.role == \"system\" %}\n        {{- \"SYSTEM:\" + msg.content }}\n    {%- elif msg.role == \"user\" %}\n        {%- if loop.first %}\n            {{- \"[Round \" ~ (ns.rounds) ~ \"] USER:\" }}\n        {%- else %}\n            {{- \" [Round \" ~ (ns.rounds) ~ \"] USER:\"}}\n        {%- endif %}\n        {%- set ns.rounds = ns.rounds + 1 %}\n        {%- if msg[\"files\"] %}\n            {{- '<longcat_files>\n' ~ msg.files | tojson(indent=2) ~ '\n</longcat_files>' }}\n        {%- endif %}\n        {{- msg.content }}\n    {%- elif msg.role == \"assistant\" %}\n        {{- \" ASSISTANT:\" }}\n        {%- if enable_thinking == true and msg.reasoning_content and ns.tool_types != [] and loop.index0 > ns.last_query_index %}\n            {{- \"\n<longcat_think>\n\" ~ msg.reasoning_content ~ \"\n</longcat_think>\n\" }}\n        {%- endif %}\n        {%- if msg.content%}\n            {{- msg.content }}\n        {%- endif %}\n        {%- if msg.tool_calls %}\n            {%- for tool_call in msg.tool_calls -%}\n                {{- \"<longcat_tool_call>\n\" -}}\n                {%- if tool_call.function.arguments is string -%}\n                    {\"name\": \"{{ tool_call.function.name}}\", \"arguments\": {{tool_call.function.arguments}}}\n                {%- else -%}\n                    {\"name\": \"{{ tool_call.function.name}}\", \"arguments\": {{tool_call.function.arguments | tojson}}}\n                {%- endif -%}\n                {{- \"\n</longcat_tool_call>\" }}\n            {%- endfor %}\n        {%- endif %}\n        {{- \"</longcat_s>\" -}}\n    {%- elif msg.role == \"tool\" %}\n        {{- \" TOOL:\" -}}\n        {%- if msg.name -%}\n            {\"name\": {{msg.name | tojson}}, \"content\": {{msg.content | tojson}}}\n        {%- else -%}\n            {\"content\": {{msg.content | tojson}}}\n        {%- endif -%}\n    {%- endif %}\n{%- endfor %}\n{%- if add_generation_prompt %} \n    {%- if enable_thinking == true %}\n        {{- \" /think_on\" }}\n        {%- if thinking_budget %}\n            {%- if thinking_budget < 1024 %}\n                {%- set thinking_budget = 1024 %}\n            {%- endif%}\n            {{- \"\nthinking_budget: < \" ~ thinking_budget ~ \".\"}}\n        {%- endif %}\n        {{- \" ASSISTANT:<longcat_think>\n\"}}\n    {%- elif enable_thinking == false %}\n        {{- \" /think_off ASSISTANT:<longcat_think>\n\n</longcat_think>\n\" }}\n    {%- else %}\n        {{- \" ASSISTANT:\" }}\n    {%- endif %}\n{%- endif %}"
}